package matthiasseifert.de.sakuranimangacollection.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import matthiasseifert.de.sakuranimangacollection.model.PersonRoles;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_ROLES".
*/
public class PersonRolesDao extends AbstractDao<PersonRoles, Void> {

    public static final String TABLENAME = "PERSON_ROLES";

    /**
     * Properties of entity PersonRoles.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonId = new Property(0, Long.class, "PersonId", false, "PERSON_ID");
        public final static Property RoleId = new Property(1, Long.class, "RoleId", false, "ROLE_ID");
    };


    public PersonRolesDao(DaoConfig config) {
        super(config);
    }
    
    public PersonRolesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_ROLES\" (" + //
                "\"PERSON_ID\" INTEGER," + // 0: PersonId
                "\"ROLE_ID\" INTEGER);"); // 1: RoleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_ROLES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonRoles entity) {
        stmt.clearBindings();
 
        Long PersonId = entity.getPersonId();
        if (PersonId != null) {
            stmt.bindLong(1, PersonId);
        }
 
        Long RoleId = entity.getRoleId();
        if (RoleId != null) {
            stmt.bindLong(2, RoleId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PersonRoles readEntity(Cursor cursor, int offset) {
        PersonRoles entity = new PersonRoles( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // PersonId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // RoleId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonRoles entity, int offset) {
        entity.setPersonId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRoleId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PersonRoles entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PersonRoles entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
