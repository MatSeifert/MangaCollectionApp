package matthiasseifert.de.sakuranimangacollection.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import matthiasseifert.de.sakuranimangacollection.model.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Isbn = new Property(1, String.class, "Isbn", false, "ISBN");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property Year = new Property(3, Integer.class, "Year", false, "YEAR");
        public final static Property Language = new Property(4, String.class, "Language", false, "LANGUAGE");
        public final static Property Publisher = new Property(5, String.class, "publisher", false, "PUBLISHER");
        public final static Property Edition = new Property(6, String.class, "Edition", false, "EDITION");
        public final static Property IsEbook = new Property(7, Boolean.class, "IsEbook", false, "IS_EBOOK");
        public final static Property CoverImage = new Property(8, String.class, "CoverImage", false, "COVER_IMAGE");
        public final static Property Value = new Property(9, Double.class, "Value", false, "VALUE");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ISBN\" TEXT," + // 1: Isbn
                "\"TITLE\" TEXT," + // 2: Title
                "\"YEAR\" INTEGER," + // 3: Year
                "\"LANGUAGE\" TEXT," + // 4: Language
                "\"PUBLISHER\" TEXT," + // 5: publisher
                "\"EDITION\" TEXT," + // 6: Edition
                "\"IS_EBOOK\" INTEGER," + // 7: IsEbook
                "\"COVER_IMAGE\" TEXT," + // 8: CoverImage
                "\"VALUE\" REAL);"); // 9: Value
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Isbn = entity.getIsbn();
        if (Isbn != null) {
            stmt.bindString(2, Isbn);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        Integer Year = entity.getYear();
        if (Year != null) {
            stmt.bindLong(4, Year);
        }
 
        String Language = entity.getLanguage();
        if (Language != null) {
            stmt.bindString(5, Language);
        }
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(6, publisher);
        }
 
        String Edition = entity.getEdition();
        if (Edition != null) {
            stmt.bindString(7, Edition);
        }
 
        Boolean IsEbook = entity.getIsEbook();
        if (IsEbook != null) {
            stmt.bindLong(8, IsEbook ? 1L: 0L);
        }
 
        String CoverImage = entity.getCoverImage();
        if (CoverImage != null) {
            stmt.bindString(9, CoverImage);
        }
 
        Double Value = entity.getValue();
        if (Value != null) {
            stmt.bindDouble(10, Value);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Isbn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Title
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Year
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Language
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // publisher
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Edition
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // IsEbook
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CoverImage
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9) // Value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsbn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYear(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLanguage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublisher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEdition(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsEbook(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setCoverImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setValue(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
